// Code generated by MockGen. DO NOT EDIT.
// Source: ../../model/base.go

// Package mock_model is a generated GoMock package.
package mock_model

import (
	context "context"
	model "git.in.zhihu.com/zhihu/hello/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockOperator is a mock of Operator interface
type MockOperator struct {
	ctrl     *gomock.Controller
	recorder *MockOperatorMockRecorder
}

// MockOperatorMockRecorder is the mock recorder for MockOperator
type MockOperatorMockRecorder struct {
	mock *MockOperator
}

// NewMockOperator creates a new mock instance
func NewMockOperator(ctrl *gomock.Controller) *MockOperator {
	mock := &MockOperator{ctrl: ctrl}
	mock.recorder = &MockOperatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOperator) EXPECT() *MockOperatorMockRecorder {
	return m.recorder
}

// Query mocks base method
func (m *MockOperator) Query(ctx *context.Context, st *model.Table, queryArgs []interface{}, options ...model.SetOption) (interface{}, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, st, queryArgs}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Query", varargs...)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query
func (mr *MockOperatorMockRecorder) Query(ctx, st, queryArgs interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, st, queryArgs}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockOperator)(nil).Query), varargs...)
}

// Create mocks base method
func (m *MockOperator) Create(ctx *context.Context, st *model.Table, options ...model.SetOption) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, st}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockOperatorMockRecorder) Create(ctx, st interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, st}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOperator)(nil).Create), varargs...)
}

// Update mocks base method
func (m *MockOperator) Update(ctx *context.Context, st *model.Table, options ...model.SetOption) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, st}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockOperatorMockRecorder) Update(ctx, st interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, st}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockOperator)(nil).Update), varargs...)
}

// MockTable is a mock of Table interface
type MockTable struct {
	ctrl     *gomock.Controller
	recorder *MockTableMockRecorder
}

// MockTableMockRecorder is the mock recorder for MockTable
type MockTableMockRecorder struct {
	mock *MockTable
}

// NewMockTable creates a new mock instance
func NewMockTable(ctrl *gomock.Controller) *MockTable {
	mock := &MockTable{ctrl: ctrl}
	mock.recorder = &MockTableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTable) EXPECT() *MockTableMockRecorder {
	return m.recorder
}

// PrimaryKey mocks base method
func (m *MockTable) PrimaryKey() map[string]interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrimaryKey")
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// PrimaryKey indicates an expected call of PrimaryKey
func (mr *MockTableMockRecorder) PrimaryKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrimaryKey", reflect.TypeOf((*MockTable)(nil).PrimaryKey))
}

// TableName mocks base method
func (m *MockTable) TableName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TableName")
	ret0, _ := ret[0].(string)
	return ret0
}

// TableName indicates an expected call of TableName
func (mr *MockTableMockRecorder) TableName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TableName", reflect.TypeOf((*MockTable)(nil).TableName))
}
